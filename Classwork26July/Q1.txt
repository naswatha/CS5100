footpath(59,60).
footpath(59,57).
footpath(59,58).
footpath(58,57).
footpath(57,56).
footpath(56,58).
footpath(54,53).
footpath(53,52).
footpath(83,65).
footpath(65,68).
footpath(76,69).
footpath(57,54).
footpath(52,68).
footpath(52,59).
footpath(52,83).
footpath(52,60).
motorway(53,54).
motorway(53,62).
motorway(53,68).
motorway(53,59).
motorway(53,60).
motorway(53,83).
motorway(54,56).
motorway(54,53).
motorway(54,62).
motorway(54,68).
motorway(54,59).
motorway(54,60).
motorway(54,83).
motorway(59,68).
motorway(59,60).
motorway(59,83).
motorway(59,62).
motorway(60,83).
motorway(60,62).
motorway(60,68).
motorway(68,83).
motorway(68,62).
motorway(68,66).
motorway(68,76).
motorway(68,64).
motorway(68,63).
motorway(62,83).
motorway(62,63).
motorway(62,64).
motorway(62,76).
motorway(62,66).
motorway(63,64).
motorway(63,76).
motorway(63,69).
motorway(63,66).
motorway(64,76).
motorway(64,69).
motorway(64,66).
motorway(76,66).
motorway(66,69).



/*
 * These two rules have recursive loop which might not be
 * efficient for two hop calculations.
 * footpath(X,Y) :- footpath(Y,X).
 * motorway(X,Y) :- motorway(Y,X).
 */
connected(X, Y) :- footpath(X, Y); motorway(X, Y).
path(X,Y) :- connected(X,Y).
path(X,Z) :- connected(Y,Z), path(X,Y).

/**
 * 1b)
 * Test cases last two takes quite some time.
 * path(53,52) true
 * path(60,83) true
 * path(63,66) true
 * path(54,66) true
 * path(60,68) true
 * 
 * 1c)
 * Is there a route between hall 53 and 52? yes
 * ? path(53,52)
 * Is there a motorway between hall 66 and 69? yes
 * ? motorway(66,69).
 * Is there a footpath between hall 60 and 58? yes
 * ? footpath(60,58)
 * There are no motorway connecting hall 59 and 58? false
 * ? motorway(59,58)
 * There are no footpath between hall 62 and 65? false
 * ? footpath(62,65)
 * Is there a route between hall 53 and 52? yes
 * ? path(59,68)
 */